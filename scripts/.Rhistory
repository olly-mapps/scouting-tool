View(passing_raw)
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = c(2022, 2023), stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_raw", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
#Select only columns that we need
player_standard <- standard_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_shooting <- shooting_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_passing <- passing_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_gca <- gca_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_defense <- defense_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_possession <- possession_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_playing_time <- playing_time_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_misc <- misc_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_keepers <- keepers_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
player_keepers_adv <- keepers_adv_raw %>% dplyr::select(-any_of(not_columns)) %>% na.omit(.)
#Loop converting stat columns to percentile ranks
for (col in colnames(dplyr::select(player_standard, where(is.numeric)))){
player_standard[col] <- round(cume_dist(player_standard[col])*100)
}
for (col in colnames(dplyr::select(player_shooting, where(is.numeric)))){
player_shooting[col] <- round(cume_dist(player_shooting[col])*100)
}
for (col in colnames(dplyr::select(player_passing, where(is.numeric)))){
player_passing[col] <- round(cume_dist(player_passing[col])*100)
}
for (col in colnames(dplyr::select(player_gca, where(is.numeric)))){
player_gca[col] <- round(cume_dist(player_gca[col])*100)
}
for (col in colnames(dplyr::select(player_defense, where(is.numeric)))){
player_defense[col] <- round(cume_dist(player_defense[col])*100)
}
for (col in colnames(dplyr::select(player_possession, where(is.numeric)))){
player_possession[col] <- round(cume_dist(player_possession[col])*100)
}
for (col in colnames(dplyr::select(player_playing_time, where(is.numeric)))){
player_playing_time[col] <- round(cume_dist(player_playing_time[col])*100)
}
for (col in colnames(dplyr::select(player_misc, where(is.numeric)))){
player_misc[col] <- round(cume_dist(player_misc[col])*100)
}
for (col in colnames(dplyr::select(player_keepers, where(is.numeric)))){
player_keepers[col] <- round(cume_dist(player_keepers[col])*100)
}
for (col in colnames(dplyr::select(player_keepers_adv, where(is.numeric)))){
player_keepers_adv[col] <- round(cume_dist(player_keepers_adv[col])*100)
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = c(2022, 2023), stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) dplyr::select(-any_of(not_columns)))
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) dplyr::select(x, -any_of(not_columns)))
type_list["passing"]
type_list["passing_stats"]
View(type_list)
View(type_list)
names(type_list)
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select( -any_of(not_columns))) %>%
na.omit(.)
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select( -any_of(not_columns)) %>%
na.omit(.))
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_type_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
names(type_list)
for (type in type_list){
for (col in colnames(dplyr::select(type, where(is.numeric)))){
type[col] <- round(cume_dist(type[col])*100)
}
}
type_list["passing"]
type_list <- lapply(type_list, function(x)
for (col in colnames(dplyr::select(x, where(is.numeric)))){
x[col] <- round(cume_dist(x[col])*100)
} )
type_list["passing"]
#Define stat types
stat_types = c("standard", "shooting", "passing", "passing_types", "gca", "defense", "possession", "playing_time", "misc", "keepers", "keepers_adv")
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = c(2022, 2023), stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define stat types
stat_types = c("standard", "shooting", "passing", "passing_types", "gca", "defense", "possession", "playing_time", "misc", "keepers", "keepers_adv")
#Define stat types
stat_types = c("standard", "shooting", "passing", "passing_types", "gca", "defense", "possession", "playing_time", "misc", "keepers", "keepers_adv")
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = c(2022, 2023), stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in type_list){
for (col in colnames(dplyr::select(type, where(is.numeric)))){
type[col] <- round(cume_dist(type[col])*100)
}
}
type_list["passing"]
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = c(2022, 2023), stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
type_list <- lapply(type_list, function(x)
for (col in colnames(dplyr::select(x, where(is.numeric)))){
x[col] <- round(cume_dist(x[col])*100)
} )
type_list["passing"]
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
type_list["passing"]
type_list[["passing"]]
type_list["passing"][2]
type_list["passing"][1]
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
for (type in type_list){
for (col in colnames(dplyr::select(type, where(is.numeric)))){
type[col] <- round(cume_dist(type[col])*100)
}
}
type_list[1]
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[stat_type]], where(is.numeric)))){
type_list[[stat_type]][col] <- round(cume_dist(type_list[[stat_type]][col])*100)
}
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric)))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric)))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
type_list
library(tidyverse)
library(worldfootballR)
#Define stat types
stat_types = c("standard", "shooting", "passing", "passing_types", "gca", "defense", "possession", "playing_time", "misc", "keepers", "keepers_adv")
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = c(2022, 2023), stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born", "Url", "Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric)))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
View(gca_stats)
test <- type_list[["passing"]]
test <- type_list[["passing"]]
test
test <- type_list[["passing"]]
test
transferred_player <-  group_by(test["Player"]) %>%
filter(n_distinct(test["Squad"]) > 1) %>%
ungroup()
transferred_player <-  group_by(test["Player"]) %>%
filter(n_distinct(test["Squad"]) > 1) %>%
ungroup()
transferred_player
test["Player", "Joselu"]
test["Player"]
transferred_player <-  test %>%
group_by(test["Player"]) %>%
filter(n_distinct(test["Squad"]) > 1) %>%
ungroup()
transferred_player
test["Player"]["Joselu"]
test %>% group_by(test["Player"])
transferred_player <-  test %>%
group_by(test["Player"]) %>%
dplyr::filter(n_distinct(test["Squad"]) > 1) %>%
ungroup()
transferred_player
test %>% dplyr::filter(test["Player"] == "Joselu")
test %>% dplyr::filter(test["Player"] == "John Guidetti")
transferred_player <-  test %>%
group_by(test["Player"]) %>%
dplyr::filter(n_distinct(test["Squad"]) > 1) %>%
transferred_player
transferred_player <-  test %>%
group_by(test["Player"]) %>%
dplyr::filter(n_distinct(test["Squad"]) > 1)
transferred_player
transferred_player <-  test %>%
group_by(test["Player"])
#dplyr::filter(n_distinct(test["Squad"]) > 1)
transferred_player
transferred_player <-  test %>%
group_by(Player)
#dplyr::filter(n_distinct(test["Squad"]) > 1)
transferred_player
transferred_player <-  test %>%
group_by(Player)
dplyr::filter(n_distinct(Squad) > 1)
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1)
transferred_player
test %>% dplyr::filter(test["Player"] == "Jason")
#Define columns to leave out
not_columns <- c("Age", "Born"," Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric)))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
test <- type_list[["passing"]]
test
transferred_player <-  test %>%
group_by(Url) %>%
dplyr::filter(n_distinct(Squad) > 1)
transferred_player
test %>% dplyr::filter(test["Player"] == "Jason")
test %>% dplyr::filter(test["Player"] == "Joselu")
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1)
transferred_player
test %>% dplyr::filter(test["Player"] == "Joselu")
test <- type_list[["passing"]]
test
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1)
transferred_player
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = c(2022, 2023), stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born"," Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric)))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
test <- type_list[["passing"]]
test
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1)
transferred_player
test %>% dplyr::filter(test["Player"] == "Joselu")
test %>% dplyr::filter(test["Player"] == "Jason")
test %>% dplyr::filter(test["Player"] == "Calum Chambers")
test %>% dplyr::filter(test["Player"] == "Sead Kolasinac")
test %>% dplyr::filter(test["Player"] == "Manu Vallejo")
test %>% dplyr::filter(test["Player"] == "Joselu")
transferred_player %>% dplyr::filter(transferred_player["Player"] == "Joselu")
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1) %>%
ungroup()
transferred_player
test %>% dplyr::filter(test["Player"] == "Joselu")
transferred_player %>% dplyr::filter(transferred_player["Player"] == "Joselu")
transferred_player %>% dplyr::filter(transferred_player["Player"] == "Jason")
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born"," Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric)))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
test <- type_list[["passing"]]
test
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1) %>%
ungroup()
transferred_player
test %>% dplyr::filter(test["Player"] == "Joselu")
transferred_player %>% dplyr::filter(transferred_player["Player"] == "Jason")
transferred_player %>% dplyr::filter(transferred_player["Player"] == "Joselu")
dplyr::select(type_list[["passing"]], where(is.numeric))
dplyr::select(type_list[["passing"]], -Season_End_Year, where(is.numeric))
dplyr::select(type_list[["passing"]], where(is.numeric))
dplyr::select(type_list[["passing"]], where(is.numeric) - Season_End_Year)
dplyr::select(type_list[["passing"]], where(is.numeric), -Season_End_Year)
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born"," Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric), -Season_End_Year))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
test <- type_list[["passing"]]
test
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1) %>%
ungroup()
transferred_player
test %>% dplyr::filter(test["Player"] == "Joselu")
#Define loop to iterate through the stat types
for (type in stat_types){
#Load the data for the specific type
temp <- data.frame(load_fb_big5_advanced_season_stats(season_end_year = 2023, stat_type = type,
team_or_player = "player"))
#Print type to assess progress
print(type)
#Assign the data a suitable name
assign(paste(type, "_stats", sep = ""), get("temp"))
}
#Define columns to leave out
not_columns <- c("Age", "Born"," Prog", "A_minus_xA", "xAG", "A_minus_xAG", "PrgP")
type_list_raw <- list(standard_stats, shooting_stats, passing_stats, passing_types_stats, gca_stats, defense_stats, possession_stats, playing_time_stats, misc_stats, keepers_stats, keepers_adv_stats)
type_list <- lapply(type_list_raw, function(x) x %>%
dplyr::select(-any_of(not_columns)) %>%
na.omit(.))
type_list <- setNames(type_list, stat_types)
for (type in stat_types){
for (col in colnames(dplyr::select(type_list[[type]], where(is.numeric), -Season_End_Year))){
type_list[[type]][col] <- round(cume_dist(type_list[[type]][col])*100)
}
}
test <- type_list[["passing"]]
test
test <- type_list[["shooting"]]
test
transferred_player <-  test %>%
group_by(Player) %>%
dplyr::filter(n_distinct(Squad) > 1) %>%
ungroup()
transferred_player
test %>% dplyr::filter(test["Player"] == "Joselu")
transferred_player %>% dplyr::filter(transferred_player["Player"] == "Joselu")
passing_stats
test <- type_list[["passing"]]
test
